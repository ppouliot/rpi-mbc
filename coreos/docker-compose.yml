version: '2'

services:

  mgmt-ui:
    image: portainer/portainer
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    expose:
      - 9000
    ports:
      - 80:9000

  drone-server:
    image: drone/drone:latest
    ports:
      - 8000:8000
    volumes:
      - /var/lib/drone:/var/lib/drone/
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=${DRONE_HOST}
      - DRONE_ORGS=ppouliot,interoperable
      - DRONE_ADMIN=ppouliot
      - DRONE_GITHUB=true
      - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT}
      - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}

  postgres:
    image: postgres:9.5
    restart: always
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_DB=gogs"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - gogs
  gogs:
    image: gogs/gogs:latest
    restart: always
    ports:
      - "10022:22"
      - "3000:3000"
    links:
      - postgres
    environment:
      - "RUN_CROND=true"
    networks:
      - gogs
    volumes:
      - "gogs-data:/data"
    depends_on:
      - postgres

networks:
    gogs:
      driver: bridge

volumes:
    db-data:
      driver: local
    gogs-data:
      driver: local
